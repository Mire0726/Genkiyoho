// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Genkiyoho/ent/schema"
	"Genkiyoho/ent/user"
	"Genkiyoho/ent/userinfo"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[0].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[1].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[2].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[3].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[4].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	userinfoFields := schema.UserInfo{}.Fields()
	_ = userinfoFields
	// userinfoDescUserID is the schema descriptor for user_id field.
	userinfoDescUserID := userinfoFields[0].Descriptor()
	// userinfo.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	userinfo.UserIDValidator = userinfoDescUserID.Validators[0].(func(int) error)
	// userinfoDescTitle is the schema descriptor for title field.
	userinfoDescTitle := userinfoFields[1].Descriptor()
	// userinfo.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	userinfo.TitleValidator = userinfoDescTitle.Validators[0].(func(string) error)
	// userinfoDescBody is the schema descriptor for body field.
	userinfoDescBody := userinfoFields[2].Descriptor()
	// userinfo.BodyValidator is a validator for the "body" field. It is called by the builders before save.
	userinfo.BodyValidator = userinfoDescBody.Validators[0].(func(string) error)
	// userinfoDescCreatedAt is the schema descriptor for created_at field.
	userinfoDescCreatedAt := userinfoFields[3].Descriptor()
	// userinfo.DefaultCreatedAt holds the default value on creation for the created_at field.
	userinfo.DefaultCreatedAt = userinfoDescCreatedAt.Default.(func() time.Time)
	// userinfoDescUpdatedAt is the schema descriptor for updated_at field.
	userinfoDescUpdatedAt := userinfoFields[4].Descriptor()
	// userinfo.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	userinfo.DefaultUpdatedAt = userinfoDescUpdatedAt.Default.(func() time.Time)
	// userinfo.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	userinfo.UpdateDefaultUpdatedAt = userinfoDescUpdatedAt.UpdateDefault.(func() time.Time)
}
