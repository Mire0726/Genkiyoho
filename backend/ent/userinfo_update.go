// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Genkiyoho/ent/predicate"
	"Genkiyoho/ent/user"
	"Genkiyoho/ent/userinfo"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserInfoUpdate is the builder for updating UserInfo entities.
type UserInfoUpdate struct {
	config
	hooks    []Hook
	mutation *UserInfoMutation
}

// Where appends a list predicates to the UserInfoUpdate builder.
func (uiu *UserInfoUpdate) Where(ps ...predicate.UserInfo) *UserInfoUpdate {
	uiu.mutation.Where(ps...)
	return uiu
}

// SetUserID sets the "user_id" field.
func (uiu *UserInfoUpdate) SetUserID(i int) *UserInfoUpdate {
	uiu.mutation.SetUserID(i)
	return uiu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableUserID(i *int) *UserInfoUpdate {
	if i != nil {
		uiu.SetUserID(*i)
	}
	return uiu
}

// SetTitle sets the "title" field.
func (uiu *UserInfoUpdate) SetTitle(s string) *UserInfoUpdate {
	uiu.mutation.SetTitle(s)
	return uiu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableTitle(s *string) *UserInfoUpdate {
	if s != nil {
		uiu.SetTitle(*s)
	}
	return uiu
}

// SetBody sets the "body" field.
func (uiu *UserInfoUpdate) SetBody(s string) *UserInfoUpdate {
	uiu.mutation.SetBody(s)
	return uiu
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableBody(s *string) *UserInfoUpdate {
	if s != nil {
		uiu.SetBody(*s)
	}
	return uiu
}

// SetCreatedAt sets the "created_at" field.
func (uiu *UserInfoUpdate) SetCreatedAt(t time.Time) *UserInfoUpdate {
	uiu.mutation.SetCreatedAt(t)
	return uiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableCreatedAt(t *time.Time) *UserInfoUpdate {
	if t != nil {
		uiu.SetCreatedAt(*t)
	}
	return uiu
}

// SetUpdatedAt sets the "updated_at" field.
func (uiu *UserInfoUpdate) SetUpdatedAt(t time.Time) *UserInfoUpdate {
	uiu.mutation.SetUpdatedAt(t)
	return uiu
}

// SetUser sets the "user" edge to the User entity.
func (uiu *UserInfoUpdate) SetUser(u *User) *UserInfoUpdate {
	return uiu.SetUserID(u.ID)
}

// Mutation returns the UserInfoMutation object of the builder.
func (uiu *UserInfoUpdate) Mutation() *UserInfoMutation {
	return uiu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uiu *UserInfoUpdate) ClearUser() *UserInfoUpdate {
	uiu.mutation.ClearUser()
	return uiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uiu *UserInfoUpdate) Save(ctx context.Context) (int, error) {
	uiu.defaults()
	return withHooks(ctx, uiu.sqlSave, uiu.mutation, uiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uiu *UserInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := uiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uiu *UserInfoUpdate) Exec(ctx context.Context) error {
	_, err := uiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiu *UserInfoUpdate) ExecX(ctx context.Context) {
	if err := uiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uiu *UserInfoUpdate) defaults() {
	if _, ok := uiu.mutation.UpdatedAt(); !ok {
		v := userinfo.UpdateDefaultUpdatedAt()
		uiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uiu *UserInfoUpdate) check() error {
	if v, ok := uiu.mutation.UserID(); ok {
		if err := userinfo.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserInfo.user_id": %w`, err)}
		}
	}
	if v, ok := uiu.mutation.Title(); ok {
		if err := userinfo.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "UserInfo.title": %w`, err)}
		}
	}
	if v, ok := uiu.mutation.Body(); ok {
		if err := userinfo.BodyValidator(v); err != nil {
			return &ValidationError{Name: "body", err: fmt.Errorf(`ent: validator failed for field "UserInfo.body": %w`, err)}
		}
	}
	if _, ok := uiu.mutation.UserID(); uiu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserInfo.user"`)
	}
	return nil
}

func (uiu *UserInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userinfo.Table, userinfo.Columns, sqlgraph.NewFieldSpec(userinfo.FieldID, field.TypeInt))
	if ps := uiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiu.mutation.Title(); ok {
		_spec.SetField(userinfo.FieldTitle, field.TypeString, value)
	}
	if value, ok := uiu.mutation.Body(); ok {
		_spec.SetField(userinfo.FieldBody, field.TypeString, value)
	}
	if value, ok := uiu.mutation.CreatedAt(); ok {
		_spec.SetField(userinfo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uiu.mutation.UpdatedAt(); ok {
		_spec.SetField(userinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if uiu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userinfo.UserTable,
			Columns: []string{userinfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userinfo.UserTable,
			Columns: []string{userinfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uiu.mutation.done = true
	return n, nil
}

// UserInfoUpdateOne is the builder for updating a single UserInfo entity.
type UserInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserInfoMutation
}

// SetUserID sets the "user_id" field.
func (uiuo *UserInfoUpdateOne) SetUserID(i int) *UserInfoUpdateOne {
	uiuo.mutation.SetUserID(i)
	return uiuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableUserID(i *int) *UserInfoUpdateOne {
	if i != nil {
		uiuo.SetUserID(*i)
	}
	return uiuo
}

// SetTitle sets the "title" field.
func (uiuo *UserInfoUpdateOne) SetTitle(s string) *UserInfoUpdateOne {
	uiuo.mutation.SetTitle(s)
	return uiuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableTitle(s *string) *UserInfoUpdateOne {
	if s != nil {
		uiuo.SetTitle(*s)
	}
	return uiuo
}

// SetBody sets the "body" field.
func (uiuo *UserInfoUpdateOne) SetBody(s string) *UserInfoUpdateOne {
	uiuo.mutation.SetBody(s)
	return uiuo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableBody(s *string) *UserInfoUpdateOne {
	if s != nil {
		uiuo.SetBody(*s)
	}
	return uiuo
}

// SetCreatedAt sets the "created_at" field.
func (uiuo *UserInfoUpdateOne) SetCreatedAt(t time.Time) *UserInfoUpdateOne {
	uiuo.mutation.SetCreatedAt(t)
	return uiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableCreatedAt(t *time.Time) *UserInfoUpdateOne {
	if t != nil {
		uiuo.SetCreatedAt(*t)
	}
	return uiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uiuo *UserInfoUpdateOne) SetUpdatedAt(t time.Time) *UserInfoUpdateOne {
	uiuo.mutation.SetUpdatedAt(t)
	return uiuo
}

// SetUser sets the "user" edge to the User entity.
func (uiuo *UserInfoUpdateOne) SetUser(u *User) *UserInfoUpdateOne {
	return uiuo.SetUserID(u.ID)
}

// Mutation returns the UserInfoMutation object of the builder.
func (uiuo *UserInfoUpdateOne) Mutation() *UserInfoMutation {
	return uiuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uiuo *UserInfoUpdateOne) ClearUser() *UserInfoUpdateOne {
	uiuo.mutation.ClearUser()
	return uiuo
}

// Where appends a list predicates to the UserInfoUpdate builder.
func (uiuo *UserInfoUpdateOne) Where(ps ...predicate.UserInfo) *UserInfoUpdateOne {
	uiuo.mutation.Where(ps...)
	return uiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uiuo *UserInfoUpdateOne) Select(field string, fields ...string) *UserInfoUpdateOne {
	uiuo.fields = append([]string{field}, fields...)
	return uiuo
}

// Save executes the query and returns the updated UserInfo entity.
func (uiuo *UserInfoUpdateOne) Save(ctx context.Context) (*UserInfo, error) {
	uiuo.defaults()
	return withHooks(ctx, uiuo.sqlSave, uiuo.mutation, uiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uiuo *UserInfoUpdateOne) SaveX(ctx context.Context) *UserInfo {
	node, err := uiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uiuo *UserInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := uiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiuo *UserInfoUpdateOne) ExecX(ctx context.Context) {
	if err := uiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uiuo *UserInfoUpdateOne) defaults() {
	if _, ok := uiuo.mutation.UpdatedAt(); !ok {
		v := userinfo.UpdateDefaultUpdatedAt()
		uiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uiuo *UserInfoUpdateOne) check() error {
	if v, ok := uiuo.mutation.UserID(); ok {
		if err := userinfo.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserInfo.user_id": %w`, err)}
		}
	}
	if v, ok := uiuo.mutation.Title(); ok {
		if err := userinfo.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "UserInfo.title": %w`, err)}
		}
	}
	if v, ok := uiuo.mutation.Body(); ok {
		if err := userinfo.BodyValidator(v); err != nil {
			return &ValidationError{Name: "body", err: fmt.Errorf(`ent: validator failed for field "UserInfo.body": %w`, err)}
		}
	}
	if _, ok := uiuo.mutation.UserID(); uiuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserInfo.user"`)
	}
	return nil
}

func (uiuo *UserInfoUpdateOne) sqlSave(ctx context.Context) (_node *UserInfo, err error) {
	if err := uiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userinfo.Table, userinfo.Columns, sqlgraph.NewFieldSpec(userinfo.FieldID, field.TypeInt))
	id, ok := uiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userinfo.FieldID)
		for _, f := range fields {
			if !userinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiuo.mutation.Title(); ok {
		_spec.SetField(userinfo.FieldTitle, field.TypeString, value)
	}
	if value, ok := uiuo.mutation.Body(); ok {
		_spec.SetField(userinfo.FieldBody, field.TypeString, value)
	}
	if value, ok := uiuo.mutation.CreatedAt(); ok {
		_spec.SetField(userinfo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if uiuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userinfo.UserTable,
			Columns: []string{userinfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userinfo.UserTable,
			Columns: []string{userinfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserInfo{config: uiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uiuo.mutation.done = true
	return _node, nil
}
